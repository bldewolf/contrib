#!/usr/bin/perl

=head1 NAME

syslog_ng_stats - Plugin for syslog-ng.
It uses the C<syslog-ng-ctl> utility to grab values.

=head1 DESCRIPTION

See C<man syslog-ng-ctl> for the C<stats> option.
All options used are regexp.

=over

=item source_name

=item source_id

=item source_instance

=item state

=item type

=item ctl_path

=back

Example of input and destination via tcp for my application:

    [syslog_ng_stats]
    user root
    env.source_name source dst\.tcp
    env.source_id myname

Example of different location for syslog-ng-ctl:

    [syslog_ng_stats]
    env.ctl_path /usr/local/sbin/syslog-ng-ctl

=head1 AUTHORS

Dmitry E. Oboukhov <unera@debian.org>,
Roman V. Nikolaev <rshadow@rambler.ru>

=head1 COPYRIGHT

Copyright (C) 2013 Dmitry E. Oboukhov <unera@debian.org>
Copyright (C) 2013 Roman V. Nikolaev <rshadow@rambler.ru>

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.

=cut

use strict;
use warnings;
use Munin::Plugin;

# Filters
my (@source_name, @source_id, @source_instance, @state, @type);
@source_name     = split m{\s+}, $ENV{source_name} || "";
@source_id       = split m{\s+}, $ENV{source_id} || "";
@source_instance = split m{\s+}, $ENV{source_instance} || "";
# ignore dynamic/orphan stats
@state           = split m{\s+}, $ENV{state} || "d o";
# ignore stamp since it's epoch time, not type COUNTER/DERIVE
@type            = split m{\s+}, $ENV{type} || "stamp";

my $bin = $ENV{ctl_path} || "syslog-ng-ctl";

# Get stats
open(my $data, "-|", "$bin stats")
    or die "Failed to open stats pipe: $!";

# eat the header
<$data>;
my @gpaths;
graph: while(my $graph = <$data>) {
    chomp $graph;
    # Split to data
    $graph = [ split m{;}, $graph ];
    $graph = {
        source_name     => $graph->[0],
        source_id       => $graph->[1],
        source_instance => $graph->[2],
        state           => $graph->[3],
        type            => $graph->[4],
        number          => $graph->[5],
    };

    # Apply filters
    foreach (@source_name) {
        next graph if $graph->{source_name} =~ m{$_}i;
    }
    foreach (@source_id) {
        next graph if $graph->{source_id} =~ m{$_}i;
    }
    foreach (@source_instance) {
        next graph if $graph->{source_instance} =~ m{$_}i;
    }
    foreach (@state) {
        next graph if $graph->{state} =~ m{$_}i;
    }
    foreach (@type) {
        next graph if $graph->{type} =~ m{$_}i;
    }

    $graph->{id} = clean_fieldname(join "_",
            $graph->{source_name},
            $graph->{source_id},
            $graph->{source_instance},
            $graph->{type});
    $graph->{label} = join(";",
            $graph->{source_name},
            $graph->{source_id},
            $graph->{source_instance},
            $graph->{type});

    # Save graph
    push @gpaths, $graph;
}

close($data)
    or die "Failed to close stats pipe: $!";

# Show config
if( exists $ARGV[0] and $ARGV[0] eq "config" ) {
    print "graph_title Syslog-ng statistics\n";
    print "graph_vlabel messages/second\n";
    print "graph_args --base 1000 --lower-limit 0 --rigid\n";
    print "graph_info This graph show syslog-ng-ctl stats\n";
    print "graph_category syslog\n";
    for my $graph (@gpaths) {
        printf "%s.label %s\n", $graph->{id}, $graph->{label};
        printf "%s.min 0\n", $graph->{id};
        printf "%s.type DERIVE\n", $graph->{id};
    }
} else {
    # Print values
    for my $graph (@gpaths) {
        printf "%s.value %s\n", $graph->{id}, $graph->{number};
    }
}
